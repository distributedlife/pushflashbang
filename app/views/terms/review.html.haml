= hidden_field_tag "start_time", 0
= hidden_field_tag "duration", 0
= hidden_field_tag "is_new", 0

=render :partial => '/header', :locals => {:title => t('titles.term-review.title'), :subtitle => "#{t('text.term-due-count')}: ..."}

#review_mode
  .panel
    %p
      The current review mode is:
      %span.contrast_faint= "#{params[:review_mode]}."
      This term has
      %span#meaning_count= "#{@related_count}"
      ="answer#{"s" if @related_count > 1}."

    #term{:id => "#{@term.id}"}
      =render :partial => '/terms/show', :locals => {:term => @term, :native => @native, :learned => @learned, :audio => @audio, :typed => @typed}

#pronunciation_guidance{:class => "hidden"}
  .panel
    %p= t('text.pronunciation-guidance')
    - @idioms.each do |idiom|
      - Idiom::translations_in_idiom_and_language(idiom.id, @learned_language.id).each do |translation|
        - unless translation.pronunciation.nil?
          - words = {}
          - translation.pronunciation.split(' ').each do |word|
            .pronunciation{:style => "display: inline-block; padding: 0.6em; text-align: center;"}
              %p.pronunciation= word
              %p.pronunciation= (get_pronunciation_expansion word).html_safe

#reveal_button
  .panel
    .button{:class => "centre big_button"}
      = link_to t('actions-reveal'), '#', :class => 'positive', :id => "do_reveal"
    .pad_from_top

#review_buttons{:class => "hidden"}
  .panel
    .button{:class => "centre large_button"}
      %ul{:style => 'display: inline-block;'}
        - semantic_form_for("review_result", :url => terms_path(:set_id => params[:set_id]), :method => :post) do |f|
          - params[:review_mode].split(",").each do |review_type|
            - review_type.strip!
            - next if review_type.empty?
            %li
              - if review_type == "typing"
                = f.input review_type.to_sym, :label => "#{@review_text[review_type]}", :required => false, :as => :boolean, :id => "#{review_type}_result", :input_html => { :checked => 'checked' }
              - else
                = f.input review_type.to_sym, :label => "#{@review_text[review_type]}", :required => false, :as => :boolean, :id => "#{review_type}_result"
            .tiny_pad_from_top
        %li
          = link_to t('actions.review-record-answer'), '#', :class => 'positive large inline-block', :method => :post, :id => "do_results", :style => 'width:12em;'
          :javascript
            $j('#do_results').click(function(event) {
              var end = new Date();
              var start_time = document.getElementById("start_time") ;
              var duration = document.getElementById("duration") ;
              elapsed = end - start_time.value;

              var link = "#{record_review_language_set_term_path()}";
              link = link + "?duration=" + duration.value ;
              link = link + "&elapsed=" + elapsed ;
              link = link + "&review_mode=" + "#{params[:review_mode]}" ;

              if ($j("#review_result_listening").length > 0)
              {
                link = link + "&listening=" + $j("#review_result_listening").attr('checked');
              }
              if ($j("#review_result_reading").length > 0)
              {
                link = link + "&reading=" + $j("#review_result_reading").attr('checked');
              }
              if ($j("#review_result_speaking").length > 0)
              {
                link = link + "&speaking=" + $j("#review_result_speaking").attr('checked');
              }
              if ($j("#review_result_writing").length > 0)
              {
                link = link + "&writing=" + $j("#review_result_writing").attr('checked');
              }
              if ($j("#review_result_typing").length > 0)
              {
                link = link + "&typing=" + $j("#review_result_typing").attr('checked');
              }
              
              $j('#do_results').attr('href', link);
            });
        .tiny_pad_from_top
        %li
          = link_to t('actions.review-confident'), '#', :class => 'neutral large inline-block', :method => :post, :id => "do_result_perfect", :style => 'width:12em;'
          :javascript
            $j('#do_result_perfect').click(function(event) {
              var end = new Date();
              var start_time = document.getElementById("start_time") ;
              var duration = document.getElementById("duration") ;
              elapsed = end - start_time.value;

              var link = "#{record_review_language_set_term_path()}";
              link = link + "?duration=" + duration.value ;
              link = link + "&elapsed=" + elapsed ;
              link = link + "&review_mode=" + "#{params[:review_mode]}" ;
              link = link + "&skip=true" ;

              if ($j("#review_result_listening").length > 0)
              {
                link = link + "&listening=" + $j("#review_result_listening").attr('checked');
              }
              if ($j("#review_result_reading").length > 0)
              {
                link = link + "&reading=" + $j("#review_result_reading").attr('checked');
              }
              if ($j("#review_result_speaking").length > 0)
              {
                link = link + "&speaking=" + $j("#review_result_speaking").attr('checked');
              }
              if ($j("#review_result_writing").length > 0)
              {
                link = link + "&writing=" + $j("#review_result_writing").attr('checked');
              }
              if ($j("#review_result_typing").length > 0)
              {
                link = link + "&typing=" + $j("#review_result_typing").attr('checked');
              }

              $j('#do_result_perfect').attr('href', link);
            });
      .pad

:javascript
  $j('html').keypress(function(event) {
    if (event.which == '32')
    {
      //we are quoting the ruby variable resolution because the javascript test driver crashes doing it. wtf!
      if ($j('#do_reveal').is(":visible") && ("#{@typed}" == "false"))
      {
        $j('#do_reveal').click();
      }
    }
    if ($j('#do_reveal').is(":hidden"))
    {
      if (event.which == '49')
      {
        $j('#do_dont_know').click();
      }
      if (event.which == '50')
      {
        $j('#do_partial_answer').click();
      }
      if (event.which == '51')
      {
        $j('#do_shaky_good').click();
      }
      if (event.which == '52')
      {
        $j('#do_good').click();
      }
    }
  });

  //start timer when document is ready
  $j(document).ready(function() {
    $j("#card_front").focus();

    var start_time = document.getElementById("start_time") ;
    start_time.value = new Date ().getTime() ;

    var is_new = document.getElementById("is_new") ;
    is_new.value = false ;
  });

  //perform the reveal action
  $j('#do_reveal').click(function(event) {
    var end = new Date();
    var start_time = document.getElementById("start_time") ;
    var duration = document.getElementById("duration") ;
    var card_answer = document.getElementById("term_typed_answer") ;
    var user_answer = document.getElementById("answer_form") ;
    var is_new = document.getElementById("is_new") ;


    duration.value = end - start_time.value;
    if (duration.value <= 2000)
    {
      //set all checkboxes as ticked

      if ($j("#review_result_listening").length != 0)
      {
        $j("#review_result_listening").attr('checked', true);
      }
      if ($j("#review_result_reading").length != 0)
      {
        $j("#review_result_reading").attr('checked', true);
      }
      if ($j("#review_result_speaking").length != 0)
      {
        $j("#review_result_speaking").attr('checked', true);
      }
      if ($j("#review_result_writing").length != 0)
      {
        $j("#review_result_writing").attr('checked', true);
      }
    }


    if (user_answer)
    {
      if (card_answer.value != user_answer.value)
      {
        //tell the user their answer didn't match
        $j("#answer_result").text("#{t('text.incorrect-notice')}");
        $j("#review_result_typing").attr('checked', false);
      }

      $j("#answer_result").show();
    }


    $j("#reveal_button").hide();
    $j("#pronunciation_guidance").show();
    $j("#review_buttons").show();
    $j("#back_of_card").show();
  });