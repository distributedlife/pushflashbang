#chapter{:id => params[:chapter]}
  %p{:style => "clear:left;"}
    = "#{t('text.chapter-prefix')} #{params[:chapter]}"
    = link_to "[#{t('actions.hide')}]", "#", :class => "subscript", :remote => true, :id => "show_chapter_#{params[:chapter]}"
    :javascript
      $j('#show_chapter_#{params[:chapter]}').click(function(event)
      {
        if ($j('#show_chapter_#{params[:chapter]}').text() == "[hide]")
        {
          $j('#chapter_content_#{params[:chapter]}').hide();
          $j('#show_chapter_#{params[:chapter]}').text('[show]');
        }
        else
        {
          $j('#chapter_content_#{params[:chapter]}').show();
          $j('#show_chapter_#{params[:chapter]}').text('[hide]');
        }

        event.stopPropagation();
      });
    #chapter_content{:id => params[:chapter]}
      - set = Sets.find params[:id]
      - set_terms = SetTerms.order(:position).where(:chapter => params[:chapter], :set_id => params[:id])
      - if set_terms.empty?
        %p= t('text.set-has-no-translations')
      - set_terms.each do |set_term|
        - set_term.idioms.each do |idiom|
          - next if Language.where(:id => idiom.id, :enabled => true).empty?
          =render :partial => '/sets/set_idioms', :locals => {:set => set, :idiom => idiom}